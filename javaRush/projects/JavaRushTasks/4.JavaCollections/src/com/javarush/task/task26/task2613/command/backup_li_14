package com.javarush.task.task26.task2613.command;

import com.javarush.task.task26.task2613.CashMachine;
import com.javarush.task.task26.task2613.ConsoleHelper;
import com.javarush.task.task26.task2613.exception.InterruptOperationException;

import java.util.ResourceBundle;

public class LoginCommand implements Command {
    private ResourceBundle validCreditCards = ResourceBundle.getBundle(CashMachine.class.getPackage().getName() + ".resources.verifiedCards");
    private ResourceBundle res = ResourceBundle.getBundle(CashMachine.class.getPackage().getName() + ".resources.login_en");

    @Override
    public void execute() throws InterruptOperationException {

        ConsoleHelper.writeMessage(res.getString("before"));
        while (true) {

            // Ask to enter card id and pin code
            ConsoleHelper.writeMessage(res.getString("specify.data"));
            String cardId = ConsoleHelper.readString();
            String pinCode = ConsoleHelper.readString();

            // Check if entered data valid
            if (cardId.matches("\\d{12}") && cardId.length() == 12 &&
                    pinCode.matches("\\d{4}") && pinCode.length() == 4) {

                // Try to identify data
                if (validCreditCards.containsKey(cardId) && validCreditCards.getString(cardId).equals(pinCode)) {
                    ConsoleHelper.writeMessage(String.format(res.getString("success.format"), cardId));
                    break;
                }
                else {
                    ConsoleHelper.writeMessage(String.format(res.getString("not.verified.format"), cardId));
                    ConsoleHelper.writeMessage(res.getString("try.again.or.exit"));
                }
            }
            else {
                ConsoleHelper.writeMessage(String.format(res.getString("not.verified.format"), cardId));
                ConsoleHelper.writeMessage(res.getString("try.again.with.details"));
            }
        }
    }
}
